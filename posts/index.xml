<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Blog</title><link>https://blog.zhade.dev/posts/</link><description>Recent content in Posts on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zhade.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Being Intentional in 2024</title><link>https://blog.zhade.dev/posts/2024-01-22-intentionality/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.zhade.dev/posts/2024-01-22-intentionality/</guid><description>I put on quite a bit of weight over COVID. Stuck in lockdown with little else to do, I quickly picked up a nasty habit of snacking. The cupboard and fridge were so accessible and readily stocked with all manner of tasty food. With nothing better to do, I would go grab a bite anytime I was hungry or bored or thirsty or anything. And of course, with all of this, I began to balloon in weight, despite wanting to remain healthy.</description></item><item><title>"for … in" vs "for … of" in JavaScript</title><link>https://blog.zhade.dev/posts/2023-09-17-for-in-javascript/</link><pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.zhade.dev/posts/2023-09-17-for-in-javascript/</guid><description>TIL that for … in and for … of have different behaviors in JavaScript.
As a native Python developer, I had presumed that for … in in JavaScript would have a similar behavior to the equivalent in Python. However, they have very different behaviors. See below:
TLDR JavaScript Python for (foo in []) for i in range([]) for (foo of []) for i in [] Details for … in iterates over the keys of a particular object, whereas for … of iterates over the values of the object.</description></item><item><title>Introduction to Adversarial AI</title><link>https://blog.zhade.dev/posts/2023-04-03-intro-adversarial-ai/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.zhade.dev/posts/2023-04-03-intro-adversarial-ai/</guid><description>The following is a transcription of a talk I&amp;rsquo;ve given internally at GitHub. The talk, and slides, are about the basics of adversarial AI, and how it can be used to attack machine learning models.
Slides
Transcript How do Machine Learning Systems work? For the purposes of this talk/ blog post, we’re not going to go too in depth into the technical details of machine learning algorithms. However, from a security perspective, it is important to note the flow of data.</description></item><item><title>Setting Secure Hashing Parameters for Password Hashing</title><link>https://blog.zhade.dev/posts/2022-05-28-setting-secure-hashing-params/</link><pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate><guid>https://blog.zhade.dev/posts/2022-05-28-setting-secure-hashing-params/</guid><description>TLDR: As of May 2022, I’d recommend using Argon2Id with the parameters recommended in RFC 9106
When trying to select the right way to protect your user’s passwords and credentials, there’s two things we need to consider. Firstly, we need to choose the right algorithm, one that is cryptographically secure. Secondly, we need to se the right parameters for the given algorithm to make it behave as securely as possible.</description></item></channel></rss>