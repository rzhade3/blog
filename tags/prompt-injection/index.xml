<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>prompt injection on Blog</title><link>https://blog.zhade.dev/tags/prompt-injection/</link><description>Recent content in prompt injection on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zhade.dev/tags/prompt-injection/index.xml" rel="self" type="application/rss+xml"/><item><title>Prompt Injection is a Weakness, not a Vulnerability</title><link>https://blog.zhade.dev/posts/2025-05-15-prompt-injection-weakness/</link><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid>https://blog.zhade.dev/posts/2025-05-15-prompt-injection-weakness/</guid><description>Prompt injection is the most widely discussed emergent threat for Large Language Models (LLMs). But how should organizations approach tracking and prioritizing it?
In my opinion, instead of being a vulnerability in and of itself, prompt injection is a weakness that leads to other, more potent vulnerabilities. While it is true that prompt injection is undesirable, it doesnâ€™t necessarily lead to any business value compromises and is also (at the time of writing) unsolvable.</description></item></channel></rss>